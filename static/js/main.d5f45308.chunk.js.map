{"version":3,"sources":["redux/Post/postTypes.js","post.js","redux/Post/postActions.js","App.js","redux/Post/postReducer.js","redux/Reducers.js","redux/store.js","index.js"],"names":["POST_FETCH_REQUEST","POST_FETCH_SUCCESS","POST_FETCH_FAILURE","posts","console","log","this","props","post","onClick","getPosts","loading","className","length","map","i","name","Component","connect","state","item","dispatch","type","rand","Math","floor","random","setTimeout","fetch","method","then","response","json","payload","catch","error","fetchPostFailure","message","App","to","path","Home","href","initialState","user","action","combineReducers","createStore","reducers","applyMiddleware","thunk","render","store","document","getElementById"],"mappings":"iOAAaA,EAAmB,qBACnBC,EAAmB,qBACnBC,EAAmB,qBCC1BC,E,uKACQ,IAAD,OAEL,OADAC,QAAQC,IAAIC,KAAKC,MAAMC,KAAKA,MAExB,qCACI,uCACA,wBAAQC,QAAS,kBAAM,EAAKF,MAAMG,SAAS,KAA3C,2BACCJ,KAAKC,MAAMC,MAAQF,KAAKC,MAAMC,KAAKG,SAAW,qBAAKC,UAAU,WAC9D,6BACKN,KAAKC,MAAMC,KAAKA,MAAQF,KAAKC,MAAMC,KAAKA,KAAKK,QAC1CP,KAAKC,MAAMC,KAAKA,KAAKM,KAAI,SAAAC,GAAC,OAAI,6BAAkBA,EAAEC,MAAXD,EAAEC,kB,GAV7CC,aAsBLC,eALS,SAAAC,GACpB,MAAO,CACHX,KAAMW,EAAMX,QAGoB,CAAEE,SCHlB,SAAAU,GACpB,OAAO,SAACC,GACJA,EArBG,CACHC,KAAMtB,IAqBN,IAAIuB,EAAOC,KAAKC,MAAsB,GAAhBD,KAAKE,UAC3BC,YAAW,WACPC,MAAM,8CAAD,OAA+CL,EAA/C,aAAgE,CACjEM,OAAQ,QAEPC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACC,GACHV,EAvBT,CACHC,KAAMrB,EACNgC,QAqBsCF,OAE7BG,OAAM,SAACC,GACJd,EApBK,SAAAc,GACrB,MAAO,CACHb,KAAMpB,EACN+B,QAASE,GAiBYC,CAAiBD,EAAME,eAEzC,QDZInB,CAAuCf,G,MEWvCmC,MAzBf,WACE,OACE,qBAAK1B,UAAU,MAAf,SACE,cAAC,IAAD,UACE,gCACE,8BACE,+BACE,6BAAI,cAAC,IAAD,CAAM2B,GAAG,IAAT,oBACJ,6BAAI,cAAC,IAAD,CAAMA,GAAG,QAAT,yBAGR,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,QAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAACC,EAAD,iBAWd,SAASA,IACP,OAAO,gCACL,sCACA,8DACA,wDACA,mBAAGC,KAAK,yCAAR,SAAiD,sD,mBCzC/CC,EAAe,CACjBhC,SAAS,EACTiC,KAAM,GACNT,MAAO,IA2BI3B,EAxBF,WAAmC,IAAlCW,EAAiC,uDAAzBwB,EAAcE,EAAW,uCAC3C,OAAQA,EAAOvB,MACX,KAAKtB,EACD,MAAO,CACHW,SAAS,EACTH,KAAM,GACN2B,MAAO,IAEf,KAAKlC,EACD,MAAO,CACHU,SAAS,EACTH,KAAMqC,EAAOZ,QACbE,MAAO,IAEf,KAAKjC,EACD,MAAO,CACHS,SAAS,EACTH,KAAM,GACN2B,MAAOU,EAAOZ,SAEtB,QAAS,OAAOd,ICzBT2B,cAAgB,CAC3BtC,SCAWuC,cAAYC,EAAUC,YAAgBC,M,MCGrDC,iBACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d5f45308.chunk.js","sourcesContent":["export const POST_FETCH_REQUEST='post-fetch-request';\r\nexport const POST_FETCH_SUCCESS='post-fetch-success';\r\nexport const POST_FETCH_FAILURE='post-fetch-failure';","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getPosts } from './redux/Post/postActions';\r\nclass posts extends Component {\r\n    render() {\r\n        console.log(this.props.post.post);\r\n        return (\r\n            <>\r\n                <h1>Posts</h1>\r\n                <button onClick={() => this.props.getPosts(21)}>Get New posts</button>\r\n                {this.props.post && this.props.post.loading && <div className=\"loader\"></div>}\r\n                <ul>\r\n                    {this.props.post.post && this.props.post.post.length &&\r\n                        this.props.post.post.map(i => <li key={i.name}>{i.name}</li>)}\r\n                </ul>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        post: state.post\r\n    }\r\n}\r\nexport default connect(mapStateToProps, { getPosts })(posts);","import { POST_FETCH_REQUEST, POST_FETCH_SUCCESS, POST_FETCH_FAILURE } from './postTypes';\r\n\r\nconst fetchPostRequest = () => {\r\n    return {\r\n        type: POST_FETCH_REQUEST\r\n    }\r\n}\r\n\r\nconst fetchPostSuccess = user => {\r\n    return {\r\n        type: POST_FETCH_SUCCESS,\r\n        payload: user,\r\n    }\r\n}\r\n\r\nconst fetchPostFailure = error => {\r\n    return {\r\n        type: POST_FETCH_FAILURE,\r\n        payload: error,\r\n    }\r\n}\r\n\r\nexport const getPosts = item => {\r\n    return (dispatch) => {\r\n        dispatch(fetchPostRequest());\r\n        let rand = Math.floor(Math.random() * 10);\r\n        setTimeout(() => {\r\n            fetch(`https://jsonplaceholder.typicode.com/posts/${rand}/comments`, {\r\n                method: 'GET'\r\n            })\r\n                .then(response => response.json())\r\n                .then((response) => {\r\n                    dispatch(fetchPostSuccess(response))\r\n                })\r\n                .catch((error) => {\r\n                    dispatch(fetchPostFailure(error.message));\r\n                })\r\n        }, 3000);\r\n    }\r\n}\r\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Post from './post';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <div>\n          <nav>\n            <ul>\n              <li><Link to=\"/\">Home</Link></li>\n              <li><Link to=\"/post\">Post</Link></li>\n            </ul>\n          </nav>\n          <Switch>\n            <Route path=\"/post\">\n              <Post />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n\nfunction Home() {\n  return <div>\n    <h1>Home</h1>\n    <h3>Using redux in react project</h3>\n    <h2>Author : Saeed Khazaei</h2>\n    <a href=\"https://github.com/Saeed-Khazaei/redux\"><button>Source Code</button></a>\n  </div>;\n}\n","import { POST_FETCH_REQUEST, POST_FETCH_SUCCESS, POST_FETCH_FAILURE } from './postTypes';\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    user: {},\r\n    error: ''\r\n}\r\n\r\nconst post = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case POST_FETCH_REQUEST:\r\n            return {\r\n                loading: true,\r\n                post: {},\r\n                error: '',\r\n            }\r\n        case POST_FETCH_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                post: action.payload,\r\n                error: ''\r\n            }\r\n        case POST_FETCH_FAILURE:\r\n            return {\r\n                loading: false,\r\n                post: {},\r\n                error: action.payload\r\n            }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default post;","import { combineReducers } from 'redux';\r\nimport post from './Post/postReducer';\r\n\r\nexport default combineReducers({\r\n    post,\r\n})","import { createStore,applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducers from './Reducers'\r\n\r\nexport default createStore(reducers, applyMiddleware(thunk)); ","import React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport App from '../src/App'\nimport store from './redux/store';\nimport './index.css';\n\nrender(\n  <Provider store={store} >\n    <App />\n  </Provider >,\n  document.getElementById('root')\n)"],"sourceRoot":""}